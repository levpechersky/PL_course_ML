(* Only legal neighbors *)
(* Return true for each pair *)
are_nighbours((0,0,0,0), (0,0,0,0));
are_nighbours((0,0,0,1), (0,1,0,0));
are_nighbours((0,0,1,0), (1,0,0,0));
are_nighbours((0,0,1,1), (1,1,0,0));
are_nighbours((0,1,0,0), (0,0,0,1));
are_nighbours((0,1,0,1), (0,1,0,1));
are_nighbours((0,1,1,0), (1,0,0,1));
are_nighbours((0,1,1,1), (1,1,0,1));
are_nighbours((1,0,0,0), (0,0,1,0));
are_nighbours((1,0,0,1), (0,1,1,0));
are_nighbours((1,0,1,0), (1,0,1,0));
are_nighbours((1,0,1,1), (1,1,1,0));
are_nighbours((1,1,0,0), (0,0,1,1));
are_nighbours((1,1,0,1), (0,1,1,1));
are_nighbours((1,1,1,0), (1,0,1,1));
are_nighbours((1,1,1,1), (1,1,1,1));

(* All rooms. Room is 4 walls in order left top right bottom *)
(* If wall is 1 - can pass that way, otherwise - can't *)
val all_rooms = [(0,0,0,0),
(0,0,0,1),
(0,0,1,0),
(0,0,1,1),
(0,1,0,0),
(0,1,0,1),
(0,1,1,0),
(0,1,1,1),
(1,0,0,0),
(1,0,0,1),
(1,0,1,0),
(1,0,1,1),
(1,1,0,0),
(1,1,0,1),
(1,1,1,0),
(1,1,1,1) ];

(* Cross-product of 2 lists *)
fun cartesian (_,[]) = []
 | cartesian ([],_) = []
 | cartesian (x::xs, ys) = (map (fn y => (x,y)) ys) @ (cartesian (xs,ys));
 
val cross = cartesian(all_rooms, all_rooms);

fun cnt([],acc) = acc 
| cnt(x::xs, acc) = if are_nighbours x then cnt(xs, acc+1) else cnt(xs,acc);

(* Should be 16 - number of all universal (in every order) neighbors *)
cnt(cross, 0);

(* Valid mazes *)
is_valid_maze [[(0,0,0,0)]]; 
is_valid_maze [[(1,1,1,1)]]; 
is_valid_maze [[(0,1,1,0),(1,1,0,0)],[(1,0,0,1),(0,0,1,1)],[(0,1,1,1),(1,1,0,0)],[(0,1,0,0),(0,0,0,1)]]; (* 4x2 *)
is_valid_maze [[(0,1,1,0),(1,0,1,0),(1,1,0,0)],[(1,0,1,0),(1,0,1,1),(1,0,1,0)]]; (* 2x3 *)
is_valid_maze [[(0,1,1,0),(1,1,0,0)],[(1,0,0,1),(0,0,1,1)]]; (* 4x1 *)
is_valid_maze [[(0,1,1,0),(1,0,1,0),(1,1,0,0)]]; (* 1x3 *)

(* Invalid mazes *)
is_valid_maze [[(0,1,1,0),(1,1,0,0)],[(1,0,0,1),(1,1,0,0)],[(0,1,1,1),(1,1,0,0)],[(0,1,0,0),(0,0,0,1)]]; (* 4x2 *)
is_valid_maze [[(0,1,1,0),(1,0,1,0),(1,1,0,0)],[(1,0,1,0),(1,0,1,1),(0,1,0,1)]]; (* 2x3 *)
is_valid_maze [[(0,1,1,0)],[(1,0,0,0)],[(1,0,0,1)],[(0,0,0,1)]]; (* 4x1 *)
is_valid_maze [[(0,1,0,0),(1,1,1,0),(0,1,0,0)]]; (* 1x3 *)

(* Mazes with exit *)
exit_maze [[(1,1,1,1)]]; 

exit_maze [[(1,1,0,0),(0,0,0,0),(0,1,1,0)],
		   [(0,0,0,0),(0,0,0,0),(0,0,0,0)],
		   [(1,0,0,1),(0,0,0,0),(0,0,1,1)]]; 


exit_maze [[(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,0,1)],
		   [(0,0,1,1),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,1,0,0)],
		   [(0,1,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,0,1)],
		   [(0,0,1,1),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,1,0,0)],
		   [(0,1,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,0,1)],
		   [(0,0,1,1),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,1,0,0)],
		   [(0,1,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,0,1)],
		   [(0,0,1,1),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,1,0,0)],
		   [(0,1,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,0,1)],
		   [(0,0,1,1),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,0,1,0),(1,1,0,0)]]; 

(* If you want your computer to die *)		   
exit_maze [[(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)]]; 
		   
(* Took me 4-5 secons *)
exit_maze [[(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)],
		   [(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1),(1,1,1,1)]]; 

		   
		   
(* Mazes with no exit *)
exit_maze [[(0,0,0,0)]]; 
